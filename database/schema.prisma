// Nexus AI Platform - Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  avatar        String?
  role          Role      @default(USER)
  tier          Tier      @default(FREE)
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  agents        Agent[]
  projects      Project[]
  sessions      Session[]
  apiKeys       ApiKey[]
  workflows     Workflow[]
  deployments   Deployment[]
  usage         UsageRecord[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  keyHash     String    @unique
  permissions String[]  // JSON array of permissions
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model Agent {
  id            String        @id @default(cuid())
  userId        String
  name          String
  description   String?
  avatar        String?
  prompt        String
  model         String        @default("gpt-4")
  temperature   Float         @default(0.7)
  maxTokens     Int           @default(2000)
  tools         String[]      // JSON array of tool IDs
  capabilities  String[]      // JSON array of capabilities
  config        Json?         // Additional configuration
  isActive      Boolean       @default(true)
  isPublic      Boolean       @default(false)
  version       String        @default("1.0.0")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  workflows     Workflow[]
  deployments   Deployment[]
  
  @@map("agents")
}

model Conversation {
  id        String    @id @default(cuid())
  agentId   String
  userId    String
  title     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relationships
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?
  tokens         Int?
  cost           Float?
  createdAt      DateTime     @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Tool {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  description String
  category    String
  icon        String?
  config      Json      // Tool configuration schema
  isActive    Boolean   @default(true)
  isBuiltIn   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("tools")
}

model Project {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  type        String    // web, mobile, game, music, etc.
  config      Json?
  files       Json?     // Project files structure
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflows   Workflow[]
  deployments Deployment[]
  
  @@map("projects")
}

model Workflow {
  id          String    @id @default(cuid())
  userId      String
  agentId     String?
  projectId   String?
  name        String
  description String?
  steps       Json      // Workflow steps configuration
  triggers    Json?     // Trigger conditions
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent       Agent?    @relation(fields: [agentId], references: [id], onDelete: SetNull)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  executions  WorkflowExecution[]
  
  @@map("workflows")
}

model WorkflowExecution {
  id         String           @id @default(cuid())
  workflowId String
  status     ExecutionStatus  @default(PENDING)
  input      Json?
  output     Json?
  error      String?
  startedAt  DateTime         @default(now())
  completedAt DateTime?
  
  workflow   Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@map("workflow_executions")
}

model Deployment {
  id        String           @id @default(cuid())
  userId    String
  agentId   String?
  projectId String?
  name      String
  url       String?
  status    DeploymentStatus @default(PENDING)
  config    Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent     Agent?           @relation(fields: [agentId], references: [id], onDelete: SetNull)
  project   Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("deployments")
}

model UsageRecord {
  id        String    @id @default(cuid())
  userId    String
  type      String    // tokens, api_calls, storage, etc.
  amount    Int
  cost      Float?
  metadata  Json?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_records")
}

// Enums
enum Role {
  ADMIN
  USER
  MODERATOR
}

enum Tier {
  FREE
  PRO
  ENTERPRISE
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum DeploymentStatus {
  PENDING
  BUILDING
  DEPLOYED
  FAILED
  STOPPED
}